// This file is generated by Firebase Studio.
"use client";

import React, { useState, useTransition, useRef } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Percent, BrainCircuit, CheckCircle, XCircle, Lightbulb, MessageSquare, Sparkles } from 'lucide-react';
import { analyzeInput, AnalysisOutput } from '@/ai/flows/analyze-jd';
import { Progress } from '@/components/ui/progress';
import { Skeleton } from '@/components/ui/skeleton';
import Link from 'next/link';

const developerSkills = [
  "React", "Next.js", "TypeScript", "JavaScript (ES6+)",
  "HTML5", "CSS3", "Tailwind CSS", "ShadCN UI",
  "Git", "GitHub", "Figma", "Adobe XD", "Firebase", "Node.js", "Genkit"
];

const JdAnalysisResult = ({ result }: { result: Extract<AnalysisOutput, { analysisType: 'jd' }> }) => (
  <>
    <Card>
      <CardHeader>
        <CardTitle className="text-2xl">Job Description Analysis</CardTitle>
        <CardDescription>Here's the breakdown of how my skills match the job.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-8">
        <div className="text-center p-6 rounded-lg bg-card-foreground/5">
          <p className="text-muted-foreground font-semibold">Match Percentage</p>
          <div className="flex items-center justify-center gap-4 mt-2">
            <Percent className="h-10 w-10 text-primary" />
            <p className="text-7xl font-bold text-gradient">{result.matchPercentage}</p>
          </div>
          <Progress value={result.matchPercentage} className="mt-4 h-4" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div>
            <h4 className="font-headline text-xl font-bold mb-4 flex items-center gap-2"><CheckCircle className="text-green-500"/> Matched Skills</h4>
            {result.matchedSkills.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {result.matchedSkills.map((skill) => (
                  <Badge key={skill} variant="secondary" className="px-3 py-1 text-base bg-green-500/10 text-green-400 border-green-500/20">{skill}</Badge>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground">No direct skill matches found.</p>
            )}
          </div>
          <div>
            <h4 className="font-headline text-xl font-bold mb-4 flex items-center gap-2"><XCircle className="text-red-500"/> Missing Skills</h4>
            {result.missingSkills.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {result.missingSkills.map((skill) => (
                  <Badge key={skill} variant="destructive" className="px-3 py-1 text-base bg-red-500/10 text-red-400 border-red-500/20">{skill}</Badge>
                ))}
              </div>
            ) : (
              <p className="text-muted-foreground">No missing skills identified!</p>
            )}
          </div>
        </div>
        <div>
          <h4 className="font-headline text-xl font-bold mb-4">Summary</h4>
          <p className="text-muted-foreground whitespace-pre-wrap">{result.summary}</p>
        </div>
      </CardContent>
    </Card>
    {result.matchPercentage >= 70 && (
      <Card className="mt-8 border-primary/50 bg-primary/5 text-center">
        <CardContent className="p-8">
          <div className="flex justify-center mb-4">
             <Sparkles className="h-12 w-12 text-primary pulse-glow" />
          </div>
          <CardTitle className="text-2xl font-headline mb-2">It's a Great Fit!</CardTitle>
          <p className="text-muted-foreground mb-6 max-w-lg mx-auto">
            Based on the analysis, my skills align strongly with this role's requirements. I'm excited by this opportunity and would love to discuss how I can contribute to your team.
          </p>
          <Button asChild size="lg">
            <Link href="/#contact">
              <MessageSquare className="mr-2 h-5 w-5" />
              Contact Me
            </Link>
          </Button>
        </CardContent>
      </Card>
    )}
  </>
);

const ProjectAnalysisResult = ({ result }: { result: Extract<AnalysisOutput, { analysisType: 'project' }> }) => (
  <>
    <Card>
      <CardHeader>
        <CardTitle className="text-2xl">Project Idea Analysis</CardTitle>
        <CardDescription>Here is a suggested tech stack and an analysis of how my skills fit the project.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-8">

      <div className="text-center p-6 rounded-lg bg-card-foreground/5">
        <p className="text-muted-foreground font-semibold">Fit Percentage</p>
        <div className="flex items-center justify-center gap-4 mt-2">
          <Percent className="h-10 w-10 text-primary" />
          <p className="text-7xl font-bold text-gradient">{result.fitPercentage}</p>
        </div>
        <Progress value={result.fitPercentage} className="mt-4 h-4" />
      </div>

        <div>
            <h4 className="font-headline text-xl font-bold mb-4 flex items-center gap-2"><Lightbulb className="text-yellow-400" /> Suggested Tech Stack</h4>
            <div className="flex flex-wrap gap-2">
                {result.suggestedStack.map((tech) => (
                  <Badge key={tech} variant="secondary" className="px-3 py-1 text-base">{tech}</Badge>
                ))}
              </div>
        </div>
          <div>
              <h4 className="font-headline text-xl font-bold mb-4">How My Skills Fit</h4>
              <p className="text-muted-foreground whitespace-pre-wrap">{result.yourFit}</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h4 className="font-headline text-xl font-bold mb-4 flex items-center gap-2"><CheckCircle className="text-green-500"/> My Relevant Skills</h4>
                {result.matchedSkills.length > 0 ? (
                  <div className="flex flex-wrap gap-2">
                    {result.matchedSkills.map((skill) => (
                      <Badge key={skill} variant="secondary" className="px-3 py-1 text-base bg-green-500/10 text-green-400 border-green-500/20">{skill}</Badge>
                    ))}
                  </div>
                ) : (
                  <p className="text-muted-foreground">No direct skill matches found.</p>
                )}
              </div>
              <div>
                <h4 className="font-headline text-xl font-bold mb-4 flex items-center gap-2"><XCircle className="text-red-500"/> Potential Skill Gaps</h4>
                {result.missingSkills.length > 0 ? (
                  <div className="flex flex-wrap gap-2">
                    {result.missingSkills.map((skill) => (
                      <Badge key={skill} variant="destructive" className="px-3 py-1 text-base bg-red-500/10 text-red-400 border-red-500/20">{skill}</Badge>
                    ))}
                  </div>
                ) : (
                  <p className="text-muted-foreground">No skill gaps identified!</p>
                )}
              </div>
        </div>

        <div>
              <h4 className="font-headline text-xl font-bold mb-4">Project Summary</h4>
              <p className="text-muted-foreground whitespace-pre-wrap">{result.summary}</p>
        </div>
      </CardContent>
    </Card>
     {result.fitPercentage >= 70 && (
      <Card className="mt-8 border-primary/50 bg-primary/5 text-center">
        <CardContent className="p-8">
          <div className="flex justify-center mb-4">
             <Sparkles className="h-12 w-12 text-primary pulse-glow" />
          </div>
          <CardTitle className="text-2xl font-headline mb-2">I'm a Great Fit for Your Project!</CardTitle>
          <p className="text-muted-foreground mb-6 max-w-lg mx-auto">
            Based on the analysis, my skill set is a strong match for your project requirements. Let's build something amazing together.
          </p>
          <Button asChild size="lg">
            <Link href="/#contact">
              <MessageSquare className="mr-2 h-5 w-5" />
              Let's Talk
            </Link>
          </Button>
        </CardContent>
      </Card>
    )}
  </>
);

const AnalysisResultSkeleton = () => (
  <Card>
    <CardHeader>
      <Skeleton className="h-8 w-3/4" />
      <Skeleton className="h-4 w-1/2" />
    </CardHeader>
    <CardContent className="space-y-8">
      <div className="text-center p-6 rounded-lg bg-card-foreground/5">
        <Skeleton className="h-6 w-1/3 mx-auto" />
        <Skeleton className="h-20 w-40 mx-auto mt-2" />
        <Skeleton className="h-4 w-full mt-4" />
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <Skeleton className="h-6 w-1/2 mb-4" />
          <div className="flex flex-wrap gap-2">
            <Skeleton className="h-8 w-20" />
            <Skeleton className="h-8 w-24" />
            <Skeleton className="h-8 w-16" />
          </div>
        </div>
        <div>
          <Skeleton className="h-6 w-1/2 mb-4" />
          <div className="flex flex-wrap gap-2">
            <Skeleton className="h-8 w-28" />
            <Skeleton className="h-8 w-20" />
          </div>
        </div>
      </div>
      <div>
        <Skeleton className="h-6 w-1/4 mb-4" />
        <div className="space-y-2">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
        </div>
      </div>
    </CardContent>
  </Card>
);


export default function AiAnalystPage() {
  const [text, setText] = useState('');
  const [analysisResult, setAnalysisResult] = useState<AnalysisOutput | null>(null);
  const [isPending, startTransition] = useTransition();
  const textAreaRef = useRef<HTMLTextAreaElement>(null);

  const handleAnalyze = () => {
    if (!text) return;
    startTransition(async () => {
      setAnalysisResult(null);
      const result = await analyzeInput({ text, developerSkills });
      setAnalysisResult(result);
    });
  };

  return (
    <main className="flex-1">
      <section className="py-16 md:py-24 lg:py-32">
        <div className="container">
          <div className="mx-auto max-w-3xl text-center">
            <Badge variant="secondary" className="mb-4 text-base py-1 px-4">Powered by AI</Badge>
            <h1 className="font-headline text-4xl font-bold tracking-tight sm:text-5xl">
              <span className="text-gradient">Why You Should Hire Me</span>
            </h1>
            <p className="mt-6 text-xl text-muted-foreground">
             Let my AI assistant analyze a job description or project idea to see how my skills align.
            </p>
          </div>

          <div className="mx-auto mt-16 max-w-4xl">
            <Card>
              <CardHeader>
                <CardTitle>Run Analysis</CardTitle>
                <CardDescription>Paste your text below to get started.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid w-full gap-2">
                  <Label htmlFor="text-input">Job Description or Project Idea</Label>
                  <Textarea
                    id="text-input"
                    ref={textAreaRef}
                    placeholder="Paste the full job description or describe your project idea here..."
                    className="min-h-[200px]"
                    value={text}
                    onChange={(e) => setText(e.target.value)}
                    disabled={isPending}
                  />
                </div>
                <div className="flex justify-center">
                  <Button onClick={handleAnalyze} disabled={isPending || !text}>
                    {isPending ? (
                      <>
                        <Loader2 className="mr-2 h-5 w-5 animate-spin" /> Analyzing...
                      </>
                    ) : (
                      <>
                        <BrainCircuit className="mr-2 h-5 w-5" /> Analyze
                      </>
                    )}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {isPending && (
             <div className="mx-auto mt-12 max-w-4xl">
                <AnalysisResultSkeleton />
            </div>
          )}

          {analysisResult && !isPending && (
            <div className="mx-auto mt-12 max-w-4xl">
              {analysisResult.analysisType === 'jd' && <JdAnalysisResult result={analysisResult} />}
              {analysisResult.analysisType === 'project' && <ProjectAnalysisResult result={analysisResult} />}
            </div>
          )}
        </div>
      </section>
    </main>
  );
}
