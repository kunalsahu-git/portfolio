// This file is generated by Firebase Studio.
"use client";

import React, { useState, useTransition, useRef } from 'react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Sparkles, Percent, Upload, FileText } from 'lucide-react';
import { analyzeJobDescription, AnalyzeJobDescriptionOutput } from '@/ai/flows/analyze-jd';
import { Progress } from '@/components/ui/progress';

const developerSkills = [
  "React", "Next.js", "TypeScript", "JavaScript (ES6+)",
  "HTML5", "CSS3", "Tailwind CSS", "ShadCN UI",
  "Git", "GitHub", "Figma", "Adobe XD", "Firebase"
];

export default function JdAnalyzerPage() {
  const [jobDescription, setJobDescription] = useState('');
  const [analysisResult, setAnalysisResult] = useState<AnalyzeJobDescriptionOutput | null>(null);
  const [isPending, startTransition] = useTransition();
  const textAreaRef = useRef<HTMLTextAreaElement>(null);

  const handleAnalyze = () => {
    if (!jobDescription) return;
    startTransition(async () => {
      const result = await analyzeJobDescription({ jobDescription, developerSkills });
      setAnalysisResult(result);
    });
  };

  const handleUploadClick = () => {
    textAreaRef.current?.focus();
  };

  return (
    <main className="flex-1">
      <section className="py-16 md:py-24 lg:py-32">
        <div className="container">
          <div className="mx-auto max-w-3xl text-center">
            <h1 className="font-headline text-4xl font-bold tracking-tight sm:text-5xl">
              <span className="text-gradient">Job Description Analyzer</span>
            </h1>
            <p className="mt-6 text-xl text-muted-foreground">
              Paste a job description below to see how well my skills align with the requirements. The AI will provide a match percentage and a breakdown of relevant skills.
            </p>
          </div>

          <div className="mx-auto mt-16 max-w-4xl">
            <Card>
              <CardHeader>
                <CardTitle>Analyze Job Requirements</CardTitle>
                <CardDescription>You can either paste the job description directly or click upload to get started.</CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid w-full gap-2">
                  <div className="flex justify-between items-center">
                    <Label htmlFor="job-description">Job Description</Label>
                     <Button variant="outline" size="sm" onClick={handleUploadClick} disabled={isPending}>
                      <Upload className="mr-2 h-4 w-4" />
                      Upload JD
                    </Button>
                  </div>
                  <Textarea
                    id="job-description"
                    ref={textAreaRef}
                    placeholder="Paste the full job description here... I'll analyze it and show you how I match up!"
                    className="min-h-[200px]"
                    value={jobDescription}
                    onChange={(e) => setJobDescription(e.target.value)}
                    disabled={isPending}
                  />
                   <p className="text-sm text-muted-foreground">
                      Note: PDF upload is not yet supported. Please copy and paste the text from the document.
                    </p>
                </div>
                <Button onClick={handleAnalyze} disabled={isPending || !jobDescription} size="lg" className="w-full">
                  {isPending ? (
                    <>
                      <Loader2 className="mr-2 h-5 w-5 animate-spin" /> Analyzing...
                    </>
                  ) : (
                    <>
                      <FileText className="mr-2 h-5 w-5" /> Analyze
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>

          {isPending && (
             <div className="mx-auto mt-12 max-w-4xl text-center">
                <Loader2 className="mx-auto h-12 w-12 animate-spin text-primary" />
                <p className="mt-4 text-lg font-semibold">AI is analyzing the job description...</p>
                <p className="text-muted-foreground">This may take a moment.</p>
            </div>
          )}

          {analysisResult && !isPending && (
            <div className="mx-auto mt-12 max-w-4xl">
              <Card className="overflow-hidden">
                <CardHeader>
                  <CardTitle className="text-2xl">Analysis Complete</CardTitle>
                  <CardDescription>Here's the breakdown of how my skills match the job.</CardDescription>
                </CardHeader>
                <CardContent className="space-y-8">
                    <div className="text-center">
                        <p className="text-muted-foreground font-semibold">Match Percentage</p>
                         <div className="flex items-center justify-center gap-4 mt-2">
                             <Percent className="h-10 w-10 text-primary" />
                            <p className="text-7xl font-bold text-gradient">{analysisResult.matchPercentage}%</p>
                        </div>
                        <Progress value={analysisResult.matchPercentage} className="mt-4 h-4" />
                    </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div>
                      <h4 className="font-headline text-xl font-bold mb-4">Matched Skills</h4>
                      {analysisResult.matchedSkills.length > 0 ? (
                        <div className="flex flex-wrap gap-2">
                          {analysisResult.matchedSkills.map((skill) => (
                            <Badge key={skill} variant="secondary" className="px-3 py-1 text-base bg-green-500/10 text-green-400 border-green-500/20">{skill}</Badge>
                          ))}
                        </div>
                      ) : (
                        <p className="text-muted-foreground">No direct skill matches found.</p>
                      )}
                    </div>
                    <div>
                      <h4 className="font-headline text-xl font-bold mb-4">Missing Skills</h4>
                       {analysisResult.missingSkills.length > 0 ? (
                        <div className="flex flex-wrap gap-2">
                          {analysisResult.missingSkills.map((skill) => (
                            <Badge key={skill} variant="destructive" className="px-3 py-1 text-base bg-red-500/10 text-red-400 border-red-500/20">{skill}</Badge>
                          ))}
                        </div>
                       ) : (
                        <p className="text-muted-foreground">No missing skills identified!</p>
                       )}
                    </div>
                  </div>
                   <div>
                        <h4 className="font-headline text-xl font-bold mb-4">Summary</h4>
                        <p className="text-muted-foreground whitespace-pre-wrap">{analysisResult.summary}</p>
                   </div>
                </CardContent>
              </Card>
            </div>
          )}
        </div>
      </section>
    </main>
  );
}
