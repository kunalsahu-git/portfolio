// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that analyzes a job description against a developer's skills.
 *
 * - analyzeJobDescription - A function that compares a JD to a skill list.
 * - AnalyzeJobDescriptionInput - The input type for the function.
 * - AnalyzeJobDescriptionOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeJobDescriptionInputSchema = z.object({
  jobDescription: z.string().describe('The full text of the job description.'),
  developerSkills: z
    .array(z.string())
    .describe("The list of the developer's skills."),
});
export type AnalyzeJobDescriptionInput = z.infer<
  typeof AnalyzeJobDescriptionInputSchema
>;

const AnalyzeJobDescriptionOutputSchema = z.object({
  matchPercentage: z
    .number()
    .describe(
      'A percentage score (0-100) of how well the developer skills match the job description.'
    ),
  matchedSkills: z
    .array(z.string())
    .describe(
      "A list of skills the developer has that are also mentioned in the job description."
    ),
  missingSkills: z
    .array(z.string())
    .describe(
      "A list of skills mentioned in the job description that the developer does not have."
    ),
  summary: z
    .string()
    .describe(
      "A brief, professional summary of the candidate's fit for the role based on the analysis."
    ),
});
export type AnalyzeJobDescriptionOutput = z.infer<
  typeof AnalyzeJobDescriptionOutputSchema
>;

export async function analyzeJobDescription(
  input: AnalyzeJobDescriptionInput
): Promise<AnalyzeJobDescriptionOutput> {
  return analyzeJdFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeJdPrompt',
  input: {schema: AnalyzeJobDescriptionInputSchema},
  output: {schema: AnalyzeJobDescriptionOutputSchema},
  prompt: `You are an expert HR analyst and career coach. Your task is to analyze a job description (JD) and compare it against a provided list of developer skills.

You must perform the following actions:
1.  Carefully read the Job Description to identify all the required technical skills (programming languages, frameworks, libraries, tools, methodologies, etc.).
2.  Compare the identified skills from the JD with the developer's skill list.
3.  Calculate a "match percentage". This should represent how many of the JD's required skills are present in the developer's skill list. If the JD requires 10 skills and the developer has 7 of them, the match percentage is 70%.
4.  List the skills the developer possesses that are mentioned in the JD ("matchedSkills").
5.  List the important skills from the JD that are *not* on the developer's list ("missingSkills").
6.  Write a concise, professional summary of the fit.

Developer's Skills:
{{#each developerSkills}}
- {{{this}}}
{{/each}}

Job Description:
"""
{{{jobDescription}}}
"""

Analyze the job description and provide the output in the specified JSON format.`,
});

const analyzeJdFlow = ai.defineFlow(
  {
    name: 'analyzeJdFlow',
    inputSchema: AnalyzeJobDescriptionInputSchema,
    outputSchema: AnalyzeJobDescriptionOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    return output!;
  }
);
