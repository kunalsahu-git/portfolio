// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that can analyze either a job description or a project idea.
 *
 * - analyzeInput - A function that directs input to the correct analysis flow.
 * - AnalysisInput - The input type for the function.
 * - AnalysisOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalysisInputSchema = z.object({
  text: z.string().describe('The full text of the job description or project idea.'),
  developerSkills: z
    .array(z.string())
    .describe("The list of the developer's skills."),
});
export type AnalysisInput = z.infer<typeof AnalysisInputSchema>;

const JobDescriptionAnalysisSchema = z.object({
  analysisType: z.string().describe('MUST be set to the literal string "jd".'),
  matchPercentage: z
    .number()
    .describe(
      'A percentage score (0-100) of how well the developer skills match the job description.'
    ),
  matchedSkills: z
    .array(z.string())
    .describe(
      "A list of skills the developer has that are also mentioned or implied in the job description."
    ),
  missingSkills: z
    .array(z.string())
    .describe(
      "A list of skills mentioned in the job description that the developer does not have."
    ),
  summary: z
    .string()
    .describe(
      "A brief, professional summary of the candidate's fit for the role based on the analysis."
    ),
});

const ProjectIdeaAnalysisSchema = z.object({
  analysisType: z.string().describe('MUST be set to the literal string "project".'),
  fitPercentage: z
    .number()
    .describe(
      'A percentage score (0-100) of how well the developer skills match the suggested technology stack.'
    ),
  suggestedStack: z.array(z.string()).describe("A list of recommended technologies for the project."),
  yourFit: z.string().describe("An explanation of how the developer's existing skills are a great fit for building this project."),
  summary: z.string().describe("A brief summary of the proposed project and technology stack."),
   matchedSkills: z
    .array(z.string())
    .describe(
      "A list of the developer's skills that are relevant for the suggested technology stack."
    ),
  missingSkills: z
    .array(z.string())
    .describe(
      "A list of important skills required for the project that are not in the developer's skill list."
    ),
});

const AnalysisOutputSchema = z.union([JobDescriptionAnalysisSchema, ProjectIdeaAnalysisSchema]);
export type AnalysisOutput = z.infer<typeof AnalysisOutputSchema>;


export async function analyzeInput(
  input: AnalysisInput
): Promise<AnalysisOutput> {
  return aiAnalystFlow(input);
}


const routerPrompt = ai.definePrompt({
    name: 'analystRouterPrompt',
    input: { schema: z.object({ text: z.string() }) },
    output: { schema: z.object({ inputType: z.enum(['job_description', 'project_idea']) }) },
    prompt: `You are a router agent. Your job is to determine if the following text is a job description or a project idea.

Text:
"""
{{{text}}}
"""

Based on the text, classify it as either 'job_description' or 'project_idea'.`
});

const jdAnalysisPrompt = ai.definePrompt({
  name: 'analyzeJdPrompt',
  input: {schema: AnalysisInputSchema},
  output: {schema: JobDescriptionAnalysisSchema},
  prompt: `You are an expert HR technology analyst and career coach with deep knowledge of the software development industry. Your task is to analyze a job description (JD) and compare it against a provided list of developer skills. Your analysis must be intelligent and go beyond simple keyword matching. You MUST set analysisType to "jd".

You must understand the relationships between technologies. For example:
- If the developer lists "React" and "Next.js", you should recognize this as "Frontend Development", "JavaScript Frameworks", and "Web Development".
- If the JD asks for "State Management", and the developer lists "Redux" or "Zustand", that's a match.
- If the JD requires "Cloud Experience" and the developer lists "Firebase" or "AWS", that's a match.

Perform the following actions:
1.  Carefully read the Job Description to identify all required technical skills, including programming languages, frameworks, libraries, tools, methodologies, and broader concepts (e.g., "CI/CD", "Testing", "UI/UX Design").
2.  Compare the identified skills from the JD with the developer's skill list, considering both direct matches and conceptual/hierarchical matches.
3.  Calculate a "match percentage". This should represent how many of the JD's required skills (both explicit and conceptual) are present in the developer's skill list. A developer with "React" and "Tailwind CSS" should get a high match score for a "Frontend Developer" role.
4.  List the skills the developer possesses that are relevant to the JD ("matchedSkills"). Include both direct matches and the developer's specific skills that satisfy a broader requirement (e.g., list "React" if the JD asks for a frontend framework).
5.  List the important skills from the JD that are *not* on the developer's list ("missingSkills").
6.  Write a concise, professional summary of the fit, highlighting how the developer's specific skills align with the role's requirements.

Developer's Skills:
{{#each developerSkills}}
- {{{this}}}
{{/each}}

Job Description:
"""
{{{text}}}
"""

Analyze the job description and provide the output in the specified JSON format.`,
});

const projectIdeaPrompt = ai.definePrompt({
    name: 'projectIdeaPrompt',
    input: { schema: AnalysisInputSchema },
    output: { schema: ProjectIdeaAnalysisSchema },
    prompt: `You are an expert technical consultant and solution architect. Your task is to analyze a project idea from a potential client and suggest a technology stack. You must also analyze how the developer's skills fit the project. You MUST set analysisType to "project".

Perform the following actions:
1.  Analyze the project description to understand its core requirements.
2.  Suggest a modern and appropriate technology stack ("suggestedStack"). Recommend specific technologies from the developer's skill list where applicable.
3.  Based on the project idea and your suggested stack, determine the key skills required to build the project.
4.  Compare the required project skills against the developer's provided skill list.
5.  Calculate a "fitPercentage". This should represent how many of the project's required skills (based on your suggested stack) are present in the developer's skill list.
6.  List the skills the developer possesses that are relevant to this project ("matchedSkills").
7.  List any important skills required for the project that the developer does not have ("missingSkills").
8.  Write a compelling summary ("yourFit") explaining how the developer's skills align perfectly with the suggested stack and project requirements.
9.  Provide a brief, high-level summary of the project and the proposed solution ("summary").

Developer's Skills:
{{#each developerSkills}}
- {{{this}}}
{{/each}}

Project Idea:
"""
{{{text}}}
"""

Analyze the project idea and provide the output in the specified JSON format.`
});


const aiAnalystFlow = ai.defineFlow(
  {
    name: 'aiAnalystFlow',
    inputSchema: AnalysisInputSchema,
    outputSchema: AnalysisOutputSchema,
  },
  async (input) => {
    const { output: route } = await routerPrompt({text: input.text});
    
    if (route?.inputType === 'project_idea') {
      const { output } = await projectIdeaPrompt(input);
      return output!;
    }

    // Default to JD analysis
    const { output } = await jdAnalysisPrompt(input);
    return output!;
  }
);
