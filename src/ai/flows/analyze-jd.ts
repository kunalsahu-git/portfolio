// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that analyzes a job description against a developer's skills.
 *
 * - analyzeJobDescription - A function that compares a JD to a skill list.
 * - AnalyzeJobDescriptionInput - The input type for the function.
 * - AnalyzeJobDescriptionOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeJobDescriptionInputSchema = z.object({
  jobDescription: z.string().describe('The full text of the job description.'),
  developerSkills: z
    .array(z.string())
    .describe("The list of the developer's skills."),
});
export type AnalyzeJobDescriptionInput = z.infer<
  typeof AnalyzeJobDescriptionInputSchema
>;

const AnalyzeJobDescriptionOutputSchema = z.object({
  matchPercentage: z
    .number()
    .describe(
      'A percentage score (0-100) of how well the developer skills match the job description.'
    ),
  matchedSkills: z
    .array(z.string())
    .describe(
      "A list of skills the developer has that are also mentioned or implied in the job description."
    ),
  missingSkills: z
    .array(z.string())
    .describe(
      "A list of skills mentioned in the job description that the developer does not have."
    ),
  summary: z
    .string()
    .describe(
      "A brief, professional summary of the candidate's fit for the role based on the analysis."
    ),
});
export type AnalyzeJobDescriptionOutput = z.infer<
  typeof AnalyzeJobDescriptionOutputSchema
>;

export async function analyzeJobDescription(
  input: AnalyzeJobDescriptionInput
): Promise<AnalyzeJobDescriptionOutput> {
  return analyzeJdFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeJdPrompt',
  input: {schema: AnalyzeJobDescriptionInputSchema},
  output: {schema: AnalyzeJobDescriptionOutputSchema},
  prompt: `You are an expert HR technology analyst and career coach with deep knowledge of the software development industry. Your task is to analyze a job description (JD) and compare it against a provided list of developer skills. Your analysis must be intelligent and go beyond simple keyword matching.

You must understand the relationships between technologies. For example:
- If the developer lists "React" and "Next.js", you should recognize this as "Frontend Development", "JavaScript Frameworks", and "Web Development".
- If the JD asks for "State Management", and the developer lists "Redux" or "Zustand", that's a match.
- If the JD requires "Cloud Experience" and the developer lists "Firebase" or "AWS", that's a match.

Perform the following actions:
1.  Carefully read the Job Description to identify all required technical skills, including programming languages, frameworks, libraries, tools, methodologies, and broader concepts (e.g., "CI/CD", "Testing", "UI/UX Design").
2.  Compare the identified skills from the JD with the developer's skill list, considering both direct matches and conceptual/hierarchical matches.
3.  Calculate a "match percentage". This should represent how many of the JD's required skills (both explicit and conceptual) are present in the developer's skill list. A developer with "React" and "Tailwind CSS" should get a high match score for a "Frontend Developer" role.
4.  List the skills the developer possesses that are relevant to the JD ("matchedSkills"). Include both direct matches and the developer's specific skills that satisfy a broader requirement (e.g., list "React" if the JD asks for a frontend framework).
5.  List the important skills from the JD that are *not* on the developer's list ("missingSkills").
6.  Write a concise, professional summary of the fit, highlighting how the developer's specific skills align with the role's requirements.

Developer's Skills:
{{#each developerSkills}}
- {{{this}}}
{{/each}}

Job Description:
"""
{{{jobDescription}}}
"""

Analyze the job description and provide the output in the specified JSON format.`,
});

const analyzeJdFlow = ai.defineFlow(
  {
    name: 'analyzeJdFlow',
    inputSchema: AnalyzeJobDescriptionInputSchema,
    outputSchema: AnalyzeJobDescriptionOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    return output!;
  }
);
